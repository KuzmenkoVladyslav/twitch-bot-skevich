import socket
import requests
import random
import os

from dotenv import load_dotenv
from keep_alive import keep_alive

keep_alive()

load_dotenv()

token = os.getenv("TWITCH_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

server = 'irc.chat.twitch.tv'
port = 6667
nickname = '6otihok_kyky'
channel = '#skevich_'
# channel = '#hapurab_i_iiochigab'

CRYPTO_IDS = {
    "btc": "bitcoin",
    "eth": "ethereum",
    "doge": "dogecoin",
    "ltc": "litecoin"
}

sock = socket.socket()
sock.connect((server, port))

sock.send(f"PASS {token}\r\n".encode('utf-8'))
sock.send(f"NICK {nickname}\r\n".encode('utf-8'))
sock.send(f"JOIN {channel}\r\n".encode('utf-8'))


print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π, —á–µ–∫–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")

def send_message(nick, msg):
    msg = f'@{nick} {msg}'
    sock.send(f"PRIVMSG {channel} :{msg}\r\n".encode('utf-8'))

def get_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=uk"
    try:
        r = requests.get(url, timeout=5)
        data = r.json()
        if data.get("cod") != 200:
            return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ç–æ {city}"
        temp = data['main']['temp']
        desc = data['weather'][0]['description']
        return f"–£ {city.title()} –∑–∞—Ä–∞–∑ {temp}¬∞C, {desc}"
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏: {e}")
        return None
    
def get_crypto_rate(symbol):
    symbol = symbol.lower()
    crypto_id = CRYPTO_IDS.get(symbol)
    if not crypto_id:
        return f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É {symbol.upper()}"
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={crypto_id}&vs_currencies=usd"
    try:
        r = requests.get(url, timeout=5)
        data = r.json()
        price = data[crypto_id]['usd']
        return f"–ö—É—Ä—Å {symbol.upper()} –∑–∞—Ä–∞–∑ {price} $"
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—É: {e}")
        return None

def get_currency_rate(currency):
    url = "https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json"
    try:
        r = requests.get(url, timeout=5)
        data = r.json()
        currency = currency.upper()
        for item in data:
            if item["cc"] == currency:
                return f"–°—å–æ–≥–æ–¥–Ω—ñ –∫—É—Ä—Å {currency} = {item['rate']} –≥—Ä–Ω"
        print(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—é—Ç—É {currency}")
        return None
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—É: {e}")
        return None
    
def define_nick_rule(nick):
    nicks_dict = {
        'skevich_': 'Short',
        'fazzlk': 'Banana'
    }
    return nicks_dict.get(nick)

def skelya_description(skelya_size):
    if skelya_size < 4:
        return "–ø–ª–∞–∫–∞–ª–∏ —É—Å—ñ–º —á–∞—Ç–æ–º BibleThump"
    elif skelya_size < 10:
        return "—â–æ—Å—å –Ω–∞ —Å–µ—Ä–µ–¥–Ω—å–æ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ–º—É (—É —Ö–æ–ª–æ–¥–Ω—ñ–π –≤–æ–¥—ñ) zaga"
    elif skelya_size < 15:
        return "—Ñ–∞–∑–ª—ñ–∫ –ø–æ—á–∏–Ω–∞—î –∑–∞–∑–¥—Ä–∏—Ç–∏ WHAT"
    else:
        return "–Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ –≤ —ñ–Ω—Å—Ç—Ä–∞–≥—Ä–∞–º—ñ, –∞–∫–∫–∞—É–Ω—Ç skevichh NOTED"
    
def get_skelya_size(nick):
    rule = define_nick_rule(nick)
    text = '—Ä–æ–∑–º—ñ—Ä —Ç–≤–æ—î—ó —Å–∫–µ–ª—ñ '
    skelya_size = 0
    if not rule:
        skelya_size = random.randint(1, 20)
        text += f'{skelya_size}'
        text += ' —Å–º, '
        text += skelya_description(skelya_size)
    else:
        if rule == 'Short':
            skelya_size = random.randint(1, 4)
            text += f'{skelya_size}'
            text += ' —Å–º, '
            text += skelya_description(skelya_size)
        elif rule == 'Banana':
            text = '—É—É—É—É –∞–∞–∞ –∞—É–∞—É—É–∞ —É 2-3  üçå  üçå  üçå '
    return text

while True:
    resp = sock.recv(4096).decode('utf-8', errors='ignore')

    for line in resp.split('\r\n'):
        if not line:
            continue

        # –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ PING
        if line.startswith('PING'):
            sock.send("PONG :tmi.twitch.tv\r\n".encode('utf-8'))
            continue

        if "PRIVMSG" in line:
            try:
                # —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                nick = line.split("!")[0][1:]
                text = line.split(":", 2)[2].strip()
            except IndexError:
                continue

            # –∫–æ–º–∞–Ω–¥–∏
            if text.strip() == "!–±—ñ–ª–¥":
                reply = "–ë–Ü–õ–î –ù–ê –ï–õ–î–ï–ù –†–Ü–ù–ì - –º–∞–∫—Å–∏–º–æ –≤—ñ—Ä—É 1 –¥–æ 2, —Ç–æ–±—Ç–æ, —è –º–æ–∂—É –º–∞—Ç–∏ 30 –≤—ñ—Ä–∏, —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –º–æ–∂—É –∫–∞—á–Ω—É—Ç–∏ –±—É–¥—å —è–∫–∏–π —ñ–Ω—à–∏–π —Å—Ç–∞—Ç –¥–æ 15. –ó–ë–†–û–Ø –ë–£–î–¨ –Ø–ö–ê –©–û –ú–ê–Ñ –í –°–û–ë–Ü –°–ö–ï–ô–õ –í–Ü–†–ò. –ê–†–ú–û–† –ë–£–î–¨ –Ø–ö–ò–ô"
                send_message(nick, reply)

            elif text.strip() == "!—Å–∫–µ–ª—è":
                reply = get_skelya_size(nick)
                send_message(nick, reply)
                
            elif text.strip() == "!–¥–µ–¥–ª–æ–∫":
                reply = "–¥–µ–¥–ª–æ–∫? –∞—Ö–∞—Ö, —è –¥—É–º–∞–≤ —Ü—è –≥—Ä–∞ –≤–∂–µ –¥–∞–≤–Ω–æ –∑–¥–æ—Ö–ª–∞ LOLOL"
                send_message(nick, reply)

            elif text.startswith("!–ø–æ–≥–æ–¥–∞"):
                parts = text.split(maxsplit=1)
                if len(parts) == 2:
                    city = parts[1]
                    reply = get_weather(city)
                    if reply:
                        send_message(nick, reply)


            elif text.startswith("!–∫—É—Ä—Å_–∫—Ä–∏–ø—Ç–∏"):
                parts = text.split(maxsplit=1)
                if len(parts) == 2:
                    crypto = parts[1]
                    reply = get_crypto_rate(crypto)
                    if reply:
                        send_message(nick, reply)

            elif text.startswith("!–∫—É—Ä—Å"):
                parts = text.split(maxsplit=1)
                if len(parts) == 2:
                    currency = parts[1]
                    reply = get_currency_rate(currency)
                    if reply:
                        send_message(nick, reply)                      
                