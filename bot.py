import socket
import requests
import random
import os
import time

from dotenv import load_dotenv

load_dotenv()

token = os.getenv("TWITCH_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
GROQ_URL = "https://api.groq.com/openai/v1/chat/completions"

server = 'irc.chat.twitch.tv'
port = 6667
nickname = '6otihok_kyky'
channel = '#skevich_'

CRYPTO_IDS = {
    "btc": "bitcoin",
    "eth": "ethereum",
    "doge": "dogecoin",
    "ltc": "litecoin"
}

def connect_to_twitch():
    while True:
        try:
            sock = socket.socket()
            sock.connect((server, port))
            sock.send(f"PASS {token}\r\n".encode('utf-8'))
            sock.send(f"NICK {nickname}\r\n".encode('utf-8'))
            sock.send(f"JOIN {channel}\r\n".encode('utf-8'))

            sock.settimeout(10)
            try:
                resp = sock.recv(4096).decode('utf-8', errors='ignore')
                print(f"Initial response from Twitch: {resp}")  # Add this for debugging
                if resp:
                    if "Login authentication failed" in resp or "Error logging in" in resp:
                        print("Authentication failed! Check your token.")
                        sock.close()
                        time.sleep(10)
                        continue
                    print("–£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Twitch IRC")
                    sock.settimeout(None)
                    return sock
            except socket.timeout:
                print("–ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ IRC, –ø–æ–≤—Ç–æ—Ä–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥")
                sock.close()
                time.sleep(10)

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥")
            time.sleep(10)

def send_message(sock, nick, msg):
    try:
        msg_full = f"@{nick} {msg}"
        sock.send(f"PRIVMSG {channel} :{msg_full}\r\n".encode('utf-8'))
        print(f"[=>] –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {msg_full}")
    except Exception as e:
        print(f"[!] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

def ask_groq(question):
    if not GROQ_API_KEY:
        print("API-–∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω–∏—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return None
    
    system_prompt = """
    –¢–∏ –≤–µ—Å–µ–ª–∏–π –º–µ–º–Ω–∏–π –±–æ—Ç –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ Twitch-—á–∞—Ç—É.
    - –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ, –∫–æ—Ä–æ—Ç–∫–æ (1-3 —Ä–µ—á–µ–Ω–Ω—è, max 80 —Å–ª—ñ–≤).
    - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—É —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –≥—Ä–∞–º–∞—Ç–∏–∫—É, –ø—Ä–∏—Ä–æ–¥–Ω–∏–π —Ä–æ–∑–º–æ–≤–Ω–∏–π —Å—Ç–∏–ª—å (–±–µ–∑ –ø–æ–º–∏–ª–æ–∫ —É –≤—ñ–¥–º—ñ–Ω–∫–∞—Ö, —Ä–æ–¥—ñ —á–∏ —á–∞—Å–∞—Ö).
    - –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–µ ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∑ –≥—É–º–æ—Ä–æ–º, –µ–º–æ–¥–∑—ñ —Ç–∞ Twitch-–µ–º–æ—Ç–∞–º–∏ (Kappa, BibleThump, PogChamp).
    - –ë—É–¥—å —á–µ—Å–Ω–∏–º: –±–∞–∑—É–π—Å—è –Ω–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≤—ñ–¥–æ–º–∏—Ö —Ñ–∞–∫—Ç–∞—Ö, –Ω–µ –≤–∏–≥–∞–¥—É–π. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞—î—à ‚Äî —Å–∫–∞–∂–∏ "–ù–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, –∞–ª–µ..." —ñ –ø–æ—Ä–∞–¥—å —à—É–∫–∞—Ç–∏.
    - –î–ª—è —Å—Ç—Ä–∏–º–µ—Ä—ñ–≤/–≥–µ–π–º–µ—Ä—ñ–≤: –¥–æ–¥–∞–π Twitch-–¥–µ—Ç–∞–ª—ñ (–ø–æ—Å–∏–ª–∞–Ω–Ω—è, —ñ–≥—Ä–∏).".
    """
    
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "mixtral-8x7b-32768",
        "messages": [
            {
                "role": "system", 
                "content": system_prompt
            },
            {
                "role": "user", 
                "content": question
            }
        ],
        "max_tokens": 100,
        "temperature": 0.7,
        "top_p": 0.9
    }
    
    try:
        r = requests.post(GROQ_URL, headers=headers, json=payload, timeout=10)
        if r.status_code != 200:
            print(f"[!] Groq –ø–æ–º–∏–ª–∫–∞: {r.status_code} - {r.text}")
            return "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ AI. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ!"
        
        data = r.json()
        answer = data['choices'][0]['message']['content'].strip()
        return answer
    except Exception as e:
        print(f"[!] –ü–æ–º–∏–ª–∫–∞ Groq: {e}")
        return "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ AI."

def get_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=uk"
    try:
        r = requests.get(url, timeout=5)
        data = r.json()
        if data.get("cod") != 200:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ç–æ {city}")
            return None
        temp = data['main']['temp']
        desc = data['weather'][0]['description']
        return f"–£ {city.title()} –∑–∞—Ä–∞–∑ {temp}¬∞C, {desc}"
    except Exception as e:
        print(f"[!] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏: {e}")
        return None

def get_crypto_rate(symbol):
    symbol = symbol.lower()
    crypto_id = CRYPTO_IDS.get(symbol)
    if not crypto_id:
        print(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É {symbol.upper()}")
        return None
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={crypto_id}&vs_currencies=usd"
    try:
        r = requests.get(url, timeout=5)
        data = r.json()
        price = data[crypto_id]['usd']
        return f"–ö—É—Ä—Å {symbol.upper()} –∑–∞—Ä–∞–∑ {price} $"
    except Exception as e:
        print(f"[!] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—É –∫—Ä–∏–ø—Ç–∏: {e}")
        return None

def get_currency_rate(currency):
    url = "https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json"
    try:
        r = requests.get(url, timeout=5)
        data = r.json()
        currency = currency.upper()
        for item in data:
            if item["cc"] == currency:
                return f"–°—å–æ–≥–æ–¥–Ω—ñ –∫—É—Ä—Å {currency} = {item['rate']} –≥—Ä–Ω"
        print(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—é—Ç—É {currency}")
        return None
    except Exception as e:
        print(f"[!] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç: {e}")
        return None

def define_nick_rule(nick):
    nicks_dict = {
        'skevich_': 'Short',
        'fazzlk': 'Banana'
    }
    return nicks_dict.get(nick)

def skelya_description(skelya_size):
    if skelya_size < 4:
        return "–ø–ª–∞–∫–∞–ª–∏ —É—Å—ñ–º —á–∞—Ç–æ–º BibleThump"
    elif skelya_size < 10:
        return "—â–æ—Å—å –Ω–∞ —Å–µ—Ä–µ–¥–Ω—å–æ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ–º—É (—É —Ö–æ–ª–æ–¥–Ω—ñ–π –≤–æ–¥—ñ) zaga"
    elif skelya_size < 15:
        return "—Ñ–∞–∑–ª—ñ–∫ –ø–æ—á–∏–Ω–∞—î –∑–∞–∑–¥—Ä–∏—Ç–∏ WHAT"
    else:
        return "–Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ –≤ —ñ–Ω—Å—Ç—Ä–∞–≥—Ä–∞–º—ñ, –∞–∫–∫–∞—É–Ω—Ç skevichh NOTED"

def get_skelya_size(nick):
    rule = define_nick_rule(nick)
    if not rule:
        skelya_size = random.randint(1, 20)
        return f"—Ä–æ–∑–º—ñ—Ä —Ç–≤–æ—î—ó —Å–∫–µ–ª—ñ {skelya_size} —Å–º, {skelya_description(skelya_size)}"
    elif rule == 'Short':
        skelya_size = random.randint(1, 4)
        return f"—Ä–æ–∑–º—ñ—Ä —Ç–≤–æ—î—ó —Å–∫–µ–ª—ñ {skelya_size} —Å–º, {skelya_description(skelya_size)}"
    elif rule == 'Banana':
        return '—É—É—É—É –∞–∞–∞ –∞—É–∞—É—É–∞ —É 2-3  üçå  üçå  üçå '

sock = connect_to_twitch()
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π, —á–µ–∫–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")

while True:
    try:
        resp = sock.recv(4096).decode('utf-8', errors='ignore')
        if resp:
            print(f"Received data: {resp}")
        if not resp:
            raise Exception("–û—Ç—Ä–∏–º–∞–Ω–æ –ø—É—Å—Ç–∏–π –ø–∞–∫–µ—Ç, –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...")
    except Exception as e:
        print(f"[!] –ü–æ–º–∏–ª–∫–∞ recv(): {e}")
        sock.close()
        sock = connect_to_twitch()
        continue

    for line in resp.split('\r\n'):
        if not line:
            continue

        if line.startswith('PING'):
            try:
                sock.send("PONG :tmi.twitch.tv\r\n".encode('utf-8'))
                print("[<=>] –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ PONG")
            except Exception as e:
                print(f"[!] –ü–æ–º–∏–ª–∫–∞ PONG: {e}")
            continue

        if "PRIVMSG" in line:
            try:
                nick = line.split("!")[0][1:]
                text = line.split(":", 2)[2].strip()
                print(f"[<=] –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {nick}: {text}")
            except Exception as e:
                print(f"[!] –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                continue

            if text.strip() == "!–±—ñ–ª–¥":
                reply = "–ë–Ü–õ–î –ù–ê –ï–õ–î–ï–ù –†–Ü–ù–ì - –º–∞–∫—Å–∏–º–æ –≤—ñ—Ä—É 1 –¥–æ 2, —Ç–æ–±—Ç–æ, —è –º–æ–∂—É –º–∞—Ç–∏ 30 –≤—ñ—Ä–∏, —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –º–æ–∂—É –∫–∞—á–Ω—É—Ç–∏ –±—É–¥—å —è–∫–∏–π —ñ–Ω—à–∏–π —Å—Ç–∞—Ç –¥–æ 15. –ó–ë–†–û–Ø –ë–£–î–¨ –Ø–ö–ê –©–û –ú–ê–Ñ –í –°–û–ë–Ü –°–ö–ï–ô–õ –í–Ü–†–ò. –ê–†–ú–û–† –ë–£–î–¨ –Ø–ö–ò–ô"
                send_message(sock, nick, reply)
            elif text.strip() == "!—Å–±—É" or text.strip() == "!–°–ë–£":
                reply = "–®–∞–Ω–æ–≤–Ω–∏–π –ú–∞–ª—é–∫ –í–∞—Å–∏–ª—å –í–∞—Å–∏–ª—å–æ–≤–∏—á! –•–æ—á—É –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, —â–æ —è –Ω–µ –º–∞—é –∂–æ–¥–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–æ —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É. –Ø –≤–∏–ø–∞–¥–∫–æ–≤–æ –ø–æ—Ç—Ä–∞–ø–∏–≤ —Å—é–¥–∏, –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ—à–∏—Ä—é–≤–∞–≤, –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–≤, –Ω–µ –ª–∞–π–∫–∞–≤ —ñ –Ω–µ —Ä–µ–ø–æ—Å—Ç–∏–≤. –ú–µ–Ω–µ –ø—ñ–¥—Å—Ç–∞–≤–∏–ª–∏. –ü—Ä–æ—à—É –≤—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ü–µ –ø—ñ–¥ —á–∞—Å –¥–æ—Å—É–¥–æ–≤–æ–≥–æ —Å–ª—ñ–¥—Å—Ç–≤–∞. –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!"
                send_message(sock, nick, reply)
            elif text.strip() == "!–æ–±—Å":
                reply = "–ü—ñ–¥–∫–∞–∂–∏ —è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –û–ë–°, —á–∏ –º–æ–∂–µ—à –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—é?"
                send_message(sock, nick, reply)
            elif text.strip() == "!—Ö—É–π–Ω—è":
                reply = "–ø–æ—á–∏—Ç–∞–≤ —á–∞—Ç, –¥—è–∫—É—é, –∑–∞–π–¥—É –ø—ñ–∑–Ω—ñ—à–µ, –º—ñ—Å—è—Ü—ñ —á–µ—Ä–µ–∑ 2"
                send_message(sock, nick, reply)
            elif text.strip() == "!—Å–∫–µ–ª—è":
                send_message(sock, nick, get_skelya_size(nick))
            elif text.strip() == "!–¥–µ–¥–ª–æ–∫":
                send_message(sock, nick, "–¥–µ–¥–ª–æ–∫? –∞—Ö–∞—Ö, —è –¥—É–º–∞–≤ —Ü—è –≥—Ä–∞ –≤–∂–µ –¥–∞–≤–Ω–æ –∑–¥–æ—Ö–ª–∞ LOLOL")
            elif text.startswith("!–ø–æ–≥–æ–¥–∞"):
                parts = text.split(maxsplit=1)
                if len(parts) == 2:
                    reply = get_weather(parts[1])
                    if reply:
                        send_message(sock, nick, reply)
            elif text.startswith("!–∫—É—Ä—Å_–∫—Ä–∏–ø—Ç–∏"):
                parts = text.split(maxsplit=1)
                if len(parts) == 2:
                    reply = get_crypto_rate(parts[1])
                    if reply:
                        send_message(sock, nick, reply)
            elif text.startswith("!–∫—É—Ä—Å"):
                parts = text.split(maxsplit=1)
                if len(parts) == 2:
                    reply = get_currency_rate(parts[1])
                    if reply:
                        send_message(sock, nick, reply)
            elif text.startswith("!–ø–∏—Ç–∞–Ω–Ω—è"):
                parts = text.split(maxsplit=1)
                if len(parts) == 2:
                    reply = ask_groq(parts[1])
                    send_message(sock, nick, reply)
            elif "—ã" in text or "—ç" in text:
                reply = '–°–≤–∏–π —Å—É–∫–∞ ReallyMad'
                send_message(sock, nick, reply)
            elif text.strip() == "!help":
                reply = "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: !–±—ñ–ª–¥, !—Å–∫–µ–ª—è, !–¥–µ–¥–ª–æ–∫, !–ø–æ–≥–æ–¥–∞ [–º—ñ—Å—Ç–æ], !–∫—É—Ä—Å_–∫—Ä–∏–ø—Ç–∏ [–Ω–∞–∑–≤–∞ –∫—Ä–∏–ø—Ç–∏], !–∫—É—Ä—Å [–Ω–∞–∑–≤–∞ –≤–∞–ª—é—Ç–∏ –∑ –ù–ë–£], !—Å–±—É, !–æ–±—Å, !—Ö—É–π–Ω—è, !–ø–∏—Ç–∞–Ω–Ω—è [—Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è]"
                send_message(sock, nick, reply)

